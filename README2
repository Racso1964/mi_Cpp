EN ESTE ARCHIVO TRATAREMOS CONCEPTOS Y DEFINICIONES REFERIDAS A 
OPERACIONES ARITMÉTICA Y REGLAS DE TIPO DE DATOS EN C++

┌─────────────────────────┬───────────────────────────┐          
│Tipos de dato            │ Operaciones.              │
├─────────────────────────┼───────────────────────────┤          
│  Numeros enteros        │  +, -, *, /               │            
│                         │  %, =, ==, !=             │
│                         │  <=, >=, vsizeof(),       │
│                         │  y operaciones con bits   │
├─────────────────────────┼───────────────────────────┤      
│ Numeros de              │  +, -, *, /               │
│ Punto Flotante          │  %, =, ==, !=             │
│                         │  <=, >=, sizeof()         │
└─────────────────────────┴───────────────────────────┘

Dependiendo el tipo de dato se hace la reservación de espacio em memoria, pues no se debe reservar espacio que no se va a utilizar.
Por ejemplo con números entero se puede hacer operaciones aritméticas como: suma, resta, multiplicación, división, módulo y operaciones lógicas como comparaciones de igualdad, de desigualdad,mayor que, menor que, etc.
Con los números de punto decimal se puede sumar, restar, multiplicar, dividir y operaciones de comparación no aplica módulo.

Para poder hacer una operación se aplica la formula: VALOR_LITERAL  OPERADOR VALOR_LITERAL.
ejemplo                                                   5             +           5.

┌────────────────────────────────────────────────────┐          
│     VALOR_LITERAL  OPERADOR VALOR_LITERAL          │
├────────────────────────────────────────────────────┤          
│    OPERACIÓN                OPERADOR               │            
│   Adición                     +                    │
│   Sustracción                 -                    │
│   multiplicación              *                    │
│   división                    /                    │
│   División de módulo          %                    │
│   multiplicación              *                    │
├────────────────────────────────────────────────────┤

la diagonal (/) representa división mientras que (%) este módulo representa residuo. De tal manera q la diagonal va a representar el cociente de una división.
Y el (%) va a representar lo que sobró de haber realizado la división.

Digamos que queremos dividi 10 entre 4.
Esperaríamos nos de un resultado de 2.5.
Y sin embargo el compilador no lo va a entender así.
La computadora va a entender que estamos queriendo saber cuantas veces cabe el 4 en un 10.
por lo tanto si ponemos 10 / 4 el resultado va a ser un 2 únicamente aunque esperemos un resultado con decimal.
Pero si colocamos 10 % 4 (Diez módulo 4) es donde me va a dar el otro 2 el cual es el que sobra.
Es importante la asimilación de este concepto, pués a ceces nos interesa no conocer el cociente o resultado de la división pero si nos interesa saber cuanto sobró endicha división.
Para eso son esos dos operadores.

Otra de las reglas básicas es:
-Sí en una división tanto el dividendo como el divisor son enteros el resultado vaa ser entero.
-Sí fuece una operación en donde uno de los operando no es un entero pero si un decimal.
    entonces el resultado va a ser de presición doble ("double")o resultado decimal. Esto es claro entenderlo en operacones de suma, resta, división y multiplicación.
    pero donde suele haber más confusión al  principio es en la división, pues dividir dos enteros resuelveotro entero.
-Síqueremos un resultado con decimal, entonces uno de los dos valores o ambos tiene que ser un flotante (número decimal).

El cuadro siguiente resume el concepto:

┌──────────┬────────┬───────┬────────────────┬─────────┐
│Operación │operador│  tipo │ Operando       │Presición│       
├──────────┼────────┼───────┼────────────────┼─────────┤          
│Adición   │   +    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤  
├──────────┼────────┼───────┼────────────────┼─────────┤          
│Sustracc  │   -    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤  
│Multiplic │   *    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤ 
│Divición  │   /    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤ 
│Módulo    │   %    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤
│Negación  │!=      │Unitrio│Entero o doble  │igual op.│
└──────────┴────────┴───────┴────────────────┴─────────┘

Como ejemplo podemos codificar:
cout<<"La división de 10 / 4 es:<<10/4<<endl;"
Esto da 2 como resultado entendiendo el computador que 4 entra dos veces en 10, de allí el resultado 2.
cout<<"El residuo de 10 / 4 es:<<10%4<<endl;"
Tambien es 2 el resultado pero referido al módulo o residuo de la divisió de 10 entre dos.

De la misma manera:
cout<<"La división de 20 / 3 es:<<20/3<<endl;" Resultado 6.
cout<<"El residuo de 20 / 3 es:<<20%3<<endl;" Resultado 2.
Porque 20 entre tres es 6 y sobran 2 como residuo.

Esto es importante asimilarlo cuando estamos haciendo operaciones aritméticas, porque si quisieramos sacar un tercio.
cout<<"La división de 1 / 3 es:<<1/3<<endl;" Resultado 0.
Entendiendo el procesador que el número 3 entra cero veces en el número 1.
En véz del resultado esperado 0,3.

Este cero puede causar muchisimos inconvenientes más adelante porque se esperaba como resultado un decimal y me dio fué cero.

Por lo tanto para obtener el resultado decimal debo hacer que uno de los dos operando sea flotante o ambos.
cout<<"La división de 1 / 3 es:<<1.0 / 3<<endl;" Resultado 0.33.
cout<<"La división de 20 / 3 es:<<20/3.0<<endl;" Resultado 6.66

REGLAS DE ESCRITURA DE OPERACIONES:
-No se debe colocar dos operadores aritméticos uno al lado del otro.
-Se pueden usar parentesis para agrupamientos. Todas las expresiones.
 dentro de parentesis se evaúan primero.
-Se puede utilizar conjunto de parentesis dentro de otro. Los parentesis interioores son evaluados primero.
-No se puede utilizar parentesis para expresar multiplicación. Siempre se debe utilizar el operador de multiplicación.

Al igualque en matemáticas, la computadora sigue las reglas de asociatividad y jerarquía de operaciones.
La Multiplicacion Division y Residuo tienen jerarquia frente a una Adicion o sustraccion.
Siempre van a tener pioridad sobre las sumas y las restas.
Pero que pasa si en un ejercicio tengo varias operaciones del mismo nive?.
En esos casos por Asociatividad se resolveria de izquierda a derecha.
No pasa nada si tenemos una multiplicacion y una resta. Obviamente se lleva primero el producto y luego la sustraccion.
Veamos un caso donde tengo tres operaciones de la misma jerarquia en la misma operacion.

8+5*7%2*4=.
 8+35%2*4=.
  8+1*4=.
   8+4=12.

Fijemonos que tenemos Multipic, Modulo y Multiplic.
Como los tres son de la misma jerarquia entonces comenzamos de izquierda a derecha.
Ignorando el ocho y el signo de Adicion porque ellos tienen por prioridad el ultimo nivel.

Otro caso.
cout<<"El resultado de 20/3.0*2 es: <<20/3.0*2<<endl;"
cout<<"El resultado de 20%3+10 es: <<20%3+10<<endl;"
cout<<"El resultado de 20-1.0/3 es: <<20-1.0/3<<endl;"

Da como resultados:
13.33.
12.
19.667.

Veamos la misma operacion modificandola.
cout<<"El resultado de 20/3.0*2 es: <<20/3.0*2<<endl;"
cout<<"El resultado de 20/(3.0*2) es: <<20/(3.0*2)<<endl;"
Da como resultados:
13.33.
3.33.

VARIABLES:
Cuando se trata de variable incluye dos partes:
-Declaracion de la variable (Reservar un espacio en la memoria).Este espacio va a depender del tipo de dato que se este trabajando.

Short int ocupa dos localidades de memoria de 1 Byte cadauna.
Un Int ocupa 4 localidades de memoria de 1 Byte cadauna.

Hay que resaltar que aunque estamos acostumbrados a trabajar con numeros y con valores.
En realidad no sabe nada de esos numeros o valores.
La computadora unicamente sabe de direcciones en memoria.

Recordando que la memoria esta estructurada por posiciones y estas  posiciones tienen cierta numeracion.

almacenamiento         almacenamiento     
para un entero         para un entero  
┌──────────┬         ┬───────┬
│    45    │         │   12  │
└──────────┴         ┴───────┴
   1652                2548
direccion            direccion
de memoria           de memoria

Entoces cuando por ejemplo,se le dice a la computadora quiero almacenar el numero 45, la computadora
no sabe que es el 45 ni que signiica ese 45 para el operador.
La computadora unicamente sabe que es ub valor entero lo que se va a almacenar entonces lo unico que
sabe es que va a tener que reservar cuatro Byte de memoria y ademastiene que guardar en algun lado la direccion en donde se guardaron esos 4 Byte que estan reservados
para que alli se ponga el numero 45.

Si por ejemplo se quiere almacenar el numero 12, nuevamente la computadora no sabe la intencion del operador de guardar un doce alli, lo unico que sabe
es que se le dijo que se quiere almacenar unumero entero.

Al ser un numero entero o de tipo "Int" entonces va y reserva 4 Byte enmemoria y va a almacenar la direccion
 en ddonde quedaronreservadas o apartadas esas localidades de manera tal que por ejemplo
 internamente lo que ocurre en el procesador es que lo que para el operador es un 45 para la computadora es una direccion 1652
y lo que para el humano es un 12 para el procesador dice que ese es un valor que esta almacenado en la direccion 2548.

Entonces es importante que entendamos que ocurre debajo de... para que asi podamos evitar algunos errores mas adelante.

  num 1           num 2        TOTAL
┌────────┬      ┬───────┬    ┬───────┬     
│    45  │      │   12  │    │   57  │
└────────┴      ┴───────┴    ┴───────┴ 
   1652            2548         3000



Cuando se hace una operacion aritmetica: TOTAL= num 1 + num 2 y su resultado.
lo voy a llamar TOTAL pues le estamos poniendo una etiqueta o identificadores.
o  nombre nombres a esos valores, que es lo que normalmente hacemos en.
las operaciones comunes. En contraste, lo que hace el procesador es decir OK
El valor que esta almacenado en la direccion 1652 de la memoria, se va a sumar
con elvalor que esta almacenado en la direccion 2548 y el resultado de esa operacion.
se va a almacenar en en la direccion 3000.


VARIABLES: Declaracion y Reglas de declaracion.
-El nombre de la variable debe comenzar con una letra o subrayado(_).
 y solo puede contener letras, subrayados o digitos. No puede contener.
 ningun espacio en blanco comas o simbolos especiales como () &  ,  $  #  .  !  \  ?.
-Un nombre de variable no puede ser una palabra clave.
-El nombre de la variale no puede consistir de mas de 1024 caracteres.


Forma de declarar una variable.
Declarar la variable unicamente consiste en apartar el espacio en memoria porque mas adelante se va a.
almacenar un dato en dicha localidad.

Aunque de principio no se sepa que dato se va a almecenar, lo que se quiere es apartar ese espacio  y identificarlo.
con un nombre para mas adelante sea mas facil identificarlo.

Por lo tanto para declarar la variable tenemos que decir primero que tipode dato voy a declarar en ese espacio, un espacio y a continuacion el nombre que sele va a poner siguiendo obviamente las tres reglas ya mencionads arriba.
Ejemplos:

int total;
float promedio;
char letra;
double calificacion;
long int fecha;
string nombre;

Alli tenemos variaas formas de declaracion, cuando leemos una de esas lineas todavia no hemos colocado el valor que ocupara dicho espacio de memoria.
Lo unico que hemos hecho es aoartar un espacio para guardar un tipo de dato deacuerdo al tipo nombrado y la etiqueta q se la va a poner a ese espacio.
Es la palabra que sigue al espacio luego del tipo.

Recordando que todas las lineas deben llevar el punto y coma para indicar el final de la instruccion.

Hasta este momento no hemos dicho que valor se alojara en dicho espacio de memoria apartado.

Veamos una configuracion de VARIABLE. (int total;)


int indica al procesador que reserve suficiente espacio para un numero
entero.

┌─────────────── ┐     
│ ߛ   ߛ  ߛ  ߛ  │        
├────────────────┤

total indica que etiquete el primer Byte de almacenamiento reservados
con el nombre "total".

Cuando estamos trabajando lo unico que se hace a la hora de declarar una variable es que cuando el compilador lee a primera palabra
que dice "int", pues lo que hace es reservar memoria para un tipo de dato "int."

Ya sabemos que un int ocupa 4 Byte entonces busca en toda la memoriaun lugar donde halla 4 localidades libres que no esten siendo utilizadas y las va a reservar.

Cuando lee el nobre que en este caso es "total", entonces le dice a la computadora que le ponga esa etiqueta a ese primer Byte, de los 4 que ya aparto.

Y ENTONCES CUANDO QUERAOS UTILIZAR ese nombre "total", no tenemos que decirle la direccion de memoria, sino con decirle el nombre con eso ya el compilador y la computadora ya sabe a que valor nos estamos refiriendo.

DECLARACION DE VARIAS VARIABLES DEL MISMO TIPO.
Para estos casos (double calif1, calif2, calif3, promedio;).

Entoces se puede hacer una declaracion multiple como se indica linea arriba.

Hagamos el programa "c_v.pp".
donde declararemos una variable tipo int con la etiqueta "x" int x,int y,char letra,float promedio
Como son de diferente tipo tengo que haceruna declaracion por separado para cada una de ellas.

Que pasa si una variable declarada "char" le asisgnamos un valor numerico.
Aunque se supone que un char acepta unicamente caracteres dentro de comillas simple.
si le asignamos un valor numerico y corremos el programa vemos que no marca error alguno.
Sin embargo a la hora de imprimir no imprime el valor numerico sino la letra "F".
Eso quiere decir que al declarar una variable tipo "char" va a almacenar el valor numerico introducido alli.
Mas a la hora de mostrar, el compilador hace la interpretacion y muestra la letra o simbolo ASCII que le corresponde a ese numero asignado a la variable tipo "char".
Pero en realidad es un numero lo que se almacena en esa localidad de memoria.

Por ese motivo cuando en un char almaceno un 70 no pasa nada, no hay error.
solamente q cuando se va a mostrar muestra el simbolo ASCII correspondiente a ese numero.

Que pasaria si se olvida que "x" e "y" fueron declaradas variables entera, y se nos ocurre decir que (x= 8.5) y  (y=9.3).
El programa no va a marcar error,al guardar valores decimales en una variable tipo numerica.

Lo que si pasaria es que a la hora de imprimir no mostrara la parte decimal.

OPERACIONES ARITMETICAS Y ASIGNACION DE RESULTADO EN UNA VARIABLE.
En matematica da lo mismo x=2 o 2=x, en lenguaje C no es asi.

En programacion en el lado izquierdo tiene que ir la variable y a la derecha el valor que se va a guardar alli.
Tambien se puede hacer la declaracion y asignacion de una variable en una sola instruccion.
ejemplo: double total=10.

Se declara "total" de tipo "double" y se le asigna el 10.

Aunque este declarado como "double" no pasa nada si le doy un valor entero.
El compilador automaticamente le va a colocar el (10.0).


La variable tipo string me guarda una palabra completa ejemplo.
nombre = "Oscar".
Y esa asignacion va entre comillas doble.A diferencia de la variable.
char q solo guarda una letre y se asigna con comilla simple: letra='a'.

COMBINA TEXTO CO VARIABLE
cout<<"El alumno"<<nombre<< "tiene un promedio final de: "<<promedio<<endl;

ASIGNACION DE VALOR EN VARIABLE

┌─────────────────────────┬───────────────────────────┐          
│  INSTRUCCION            │ valor de suma             │
├─────────────────────────┼───────────────────────────┤          
│  suma = 0               │          0                │
├─────────────────────────┼───────────────────────────┤          
│  suma = suma + 96       │          96               │
└─────────────────────────┴───────────────────────────┘

Para complementar el tema tenemos un cuadro donde la variable suma se inicializa
con valor cero y seguido otra instruccion "suma = suma + 96".
¿QUE ES LO QUE HACE INTERNAMENTE EL COMPLILADOR?.
Recordando que elcompilador resuelve primero el lado derecho de la igualdad
"suma = suma + 96", luego va al espacio de memoriaasignado a "suma" y lee que
cantidad hay asignada previamente alli, en esta caso hay un cero, este valor
cero lo va a sumar con el nuevo valor asignado "96" y ese resultado lo va A
almacenar alli mismo en suma, porlotanto suma cambio de valor.

Esto tambien se le conoce como una variable de acumulacion proque mas que sumar
aotras variables esta sumandose sobre si misma. Porlotanto podemos abreviar
estas operaciones con estas combinaciones: +=  -=  *=  /=  %=.

+= Cuando tengamos una combinacion +=  significa que vamos a acumular sobre la misma variable.
Es decir lo que hace esta combiancio es que el compilador toma el valor que tiene una variable y a esa misma variable le suma el el nuevo valor que le coloquemos al lado derecho de dicha combinacion +=

-= Cuando tenemos un    -=  en lugarde acumular a esa variable lo que haria es decrementarlo: lo que tenia esa variable, si antes tenia un 96 y al lado derecho a la combinacion -=  se coloca 96 entonces la variable quedara en cero.

Hacemos lo mismo con una multiplicacion *=  una division /0 o un residuo %=

Basicamente siempre que encontremos alguna de esas combinaciones el compilador sabe que se va a hacer la operacion sobre esa misma variable.

Esto tambien nos sirve par las famosas variables de conteo:

VARIABLE DE CONTEO.
"variable = variable + numero fijo"

Se usa bien para sumar, restar, multiplicar dividir etc.

┌─────────────────────────┬───────────────────────────┐          
│    EXPRESION            │   ALTERNATIVA             │
├─────────────────────────┼───────────────────────────┤          
│  i = i + 1              │   i++ O  ++i              │
├─────────────────────────┼───────────────────────────┤          
│  n = n + 1              │   n++  O  --n             │
├─────────────────────────┼───────────────────────────┤          
│  j = j + 2              │   _____________           │
├─────────────────────────┼───────────────────────────┤          
│  k = k - 1              │   k--  O  --k             │
├─────────────────────────┼───────────────────────────┤          
│contador = contador + 1  │contador--  O  --contador  │
└─────────────────────────┴───────────────────────────┘

Hay que destacar que las alternativas del tipo j++  o i-- funcionan cuando el valor fijo es 1.

De aqui sale un tipo especial de variales que son conocidas commo variablaes acumulativas o vaariables de conteo

En el codigo c_p.cpp declararemos una variable de control llamada "contador" como va a ser un valor pequeño no necesito declararla tipo int, usaremos para estecaso short int que es mas que suficiente.

UN ERROR COMUN AL INICIARSE EN LA PROGRAMACION RESPECTO A ESTA TEMATICA
Declararemos a 3 vaariables adicionales tipo short int: a,b,c.

Asignaremos 10000 para a, 20000 para b luego c=a+b resultado dentro del rango.
asignamos 12767 y lo sumamos con b resultado sigue dentro del rango.
asignamos 12768 y lo sumamos con b resultado = -32768 !!ERROR.
En ete momento se ha desbordado el rango maximo del tipo de variable short int el cuales 32767.
Por esta razon tenemos que darnos cuenta que al ocurrir un desbordamiento de rango del tipo de varable,una vez que llega a su valor maximo, se reinicia a su valor minimo.
Y a partir de alli comienza a contar nuevamente, porlotanto como se desbordo por unpunto, ese desbordamientoo lo paso a su valor minimo que es -32768, pues
el rango de una variable tipo short  int va desde -32768 a 32767.

Si se desbordara en 3 puntos entonces el valor sesgado va a ser -32766.

Ya sabiendo commo se asignan los daatos a una variable, ya podemos ver que tambien podemos hacer operaciones aritmeticas y el resultado de esa operacion aritmetica aignarlo a una variable
diferencia=15-6;
para eta operacion el compilador trabaja primero al lado dercho de la igualdad y el resultado lo asigna a la variable situada al lado izquierdo de dicha igualdad.

Otrra forma de declarar una vaariable es si ya de un parincipio sabemos cual valorva a tomar esa variable, entonces, podeemos hacer las dosoperaciones juntas: la de declaracion y asisgnacion.
double total = 10;

si quiero una operacion z=10/x donde x vale 8
como resultado me dara 1 en vez de 1.25 que es el valor esperado. esto porque estoy haciendo una operacion entero entre entero.

como z esta declarado como entero, aunque el resultado de la operacion sea un valor decimal, z tomara unicamente la parte entera de ese resultado.

Por logeneral y como regla no escrita es que al hacer operaciones con divisiones, lo mas recomendable es que, siempre debo estar terbajando las variables como tipo flotante:
calificacion1=8.5 calificacion2=10;aunque ponga un valor entero para calificacion2 no importaria porque como esta declarada como flotante, el compilador automaticamente le coloca el punto decimal.

ENTRADA DE DATOS.

Cin: instruccion para leer un dato desde el teclado. Un numero, una letra o una palabra (CIN>>) a diferencia de (COUT<<) El simbolo de insercion difiere para cada instruccion.
En ocaciones necesitamos introducir mas de una palabra e incluso multiples lineas de informacion, para tal caso lo recomendado es Getline.
   
getline():  Es una funcion de la biblioteca standard que se utiliza para leer lineas completas de texto de un flujo de entrada, como la entrada estandar del teclado o desde un archivo. a diferencia del operador >> que solo lee hasta el primer espacio en blanco, getline() lee todos los caracteres hasta encontrar un delimitador,(por defecto el caracter de nueva linea \n)

Notando que el operador de insersion de CIN ">>" apunta a la derecha y simboliza entrada de dato.
El simbolo de insercion de COUT "<<" apunta hacia la izquierda y simboliza salida de dato.

CIN>>numero; para operar una instruccion CIN, luego de escribirla immediatamente va el operador de insrcion ">>", luego el nombre de la variable en donde almacenar el dato de entrada por teclado.
CIN>>numero1>>numero2 Caso para cuando queremos leer varios datos del teclado.

El compilador entiende que ya introduje el dato al momento de dar ENTER y lo almacena a la variable.

Asi como puedo hacer declaraciones multiples, tambien puedo leer varios datos del teclado con una instruccion en una sola linea:
cin>>x>>y; Aqui decimos q vamos a pedir dos datos: el primero para x, el segundo para y.

Hay que hacer el programa entendible para el usuario porlotanto hay que rotular un texto donde se pide el valor requerido para cadavariable:

cout<<"Teclee el valor de x";
cin>>x;

cout<<"Teclee el valor de y";
cin>>y;

De esta manera el usuario ya sabe que dato debe teclear.
como tanto x e y son entero, al correr el programa si le introduzco un dato decimal, luego que el compilador lee ese dato se sale del programa, no sin antes darme el resultado del dato ingresado en x pero me dice que el dato de y es cero, esto porque como se salio de la corrida y no se logra pedir datos para y.

para evitar este sesgo debo emplear los tipos de variables como flotante en vezde entero.

ENTRADA DE DATO char
Si en vez de una letra se teclea 85, y despliego por consola el caracter tecleado me dira que es 8 y no 85
porque  a pesar que el compilador continua leyendo luego del primer caracter, va a ignorar lo que este seguido a ese primer caracter pues un tipo de dato char solo almacena un caracter.
es decir el primero que e halla tecleado, ese quedqra almacenado, por lo tanto no hay que creer que como si nos permite seguir introduciendo datos, el compilador lo va a tomar en cuenta.

Si tecleara Hola mundo! la unica letra que almacenara sera "H".

INTRODUCIR UNA PALABRA.en string
No me conviene una variable char.
STRING  es el tipo de variable apropiado para este caso.
Un string acepta una palabra completa a diferencia de un char que acepta solo un caracter o digito del 0 al 9.

Una vez introducida la palabra. que pasa si continuo tecleando otra palabra. En estos casos el compilador acepta las palabras mas no las toma en cuenta, solamente almacenara la primera palabra.


INTRODUCIR VARIAS PALABRAS.en variable string

Para introducir por teclado varias palabras o una serie de lineas de texto:
GETLINE es la instruccion para leer por teclado varias palabras.

Al igual que con la instruccion de lectura por teclado "cin"
Con Getline al momento de teclear enter el compilador lee todo lo que hallamos tecleado y lo almacena en una variable.

GETLINE tiene varias combinaciones:


caso 1: 
Utilizar GETLINE con 2 parametros
┌─────────────────────────┬───────────────────────────┐          
│  INSTRUCCION DE LECTURA │ PARAMETROS                │
├─────────────────────────┼───────────────────────────┤          
│GETLINE con 2 parametros │getline(cin,nomb_variable) │
├─────────────────────────┼───────────────────────────┤          
│                         │                           │
└─────────────────────────┴───────────────────────────┘

En este caso podemos escribir todo lo que queramos incluyendo espacios y el compilador lo aceptara y almacenara todo tal cual lo tecleemos.
Para este caso GETLINE  con 2 parametros, prmero escribimos la instruccion "getline()" luego dentro del parentesis el operador "cin"para entrada por teclado seguido una coma para separarlo del nombre de la variable a almacenar la informacion tecleada.
Esta introduccion se ejecuta al momento de dar la instruccion ENTER.
De igual puedo usar una variable tipo string.


caso 2:
UTILIZAR GETLINE CON 3 PARAMETROS



┌─────────────────────────┬──────────────────────────────┐          
│  INSTRUCCION DE LECTURA │ PARAMETROS                   │
├─────────────────────────┼──────────────────────────────┤          
│GETLINE con 2 parametros │getline(cin,nomb_variable," ")│
├─────────────────────────┼──────────────────────────────┤          
│GETLINE con 3 parametros │                              │
└─────────────────────────┴──────────────────────────────┘

La segunda opcion de GELINE CON 3 PARAMETROS, este tercer parametro sirve para poder definir un caracter o una combinacion de ellos y le indican al compilador que hasta alli se debeb de dejar de leer los datos tecleados.
La sintaxis es igual a la anterior adicionando un tercer parametro como bandera para el compilador deje de leer.
Ese tercer parametro puede ser un espaciador o espacio en blanco, un caracter particular que nos sirva de delimitador tipo char para saber que hasta alli debemos dejar de teclear.
El delimitador o tercer parametro como debe ser un char, debe ir entre comillas simple    ' '.




























