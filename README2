EN ESTE ARCHIVO TRATAREMOS CONCEPTOS Y DEFINICIONES REFERIDAS A 
OPERACIONES ARITMÉTICA Y REGLAS DE TIPO DE DATOS EN C++

┌─────────────────────────┬───────────────────────────┐          
│Tipos de dato            │ Operaciones.              │
├─────────────────────────┼───────────────────────────┤          
│  Numeros enteros        │  +, -, *, /               │            
│                         │  %, =, ==, !=             │
│                         │  <=, >=, vsizeof(),       │
│                         │  y operaciones con bits   │
├─────────────────────────┼───────────────────────────┤      
│ Numeros de              │  +, -, *, /               │
│ Punto Flotante          │  %, =, ==, !=             │
│                         │  <=, >=, sizeof()         │
└─────────────────────────┴───────────────────────────┘

Dependiendo el tipo de dato se hace la reservación de espacio em memoria, pues no se debe reservar espacio que no se va a utilizar.
Por ejemplo con números entero se puede hacer operaciones aritméticas como: suma, resta, multiplicación, división, módulo y operaciones lógicas como comparaciones de igualdad, de desigualdad,mayor que, menor que, etc.
Con los números de punto decimal se puede sumar, restar, multiplicar, dividir y operaciones de comparación no aplica módulo.

Para poder hacer una operación se aplica la formula: VALOR_LITERAL  OPERADOR VALOR_LITERAL.
ejemplo                                                   5             +           5.

┌────────────────────────────────────────────────────┐          
│     VALOR_LITERAL  OPERADOR VALOR_LITERAL          │
├────────────────────────────────────────────────────┤          
│    OPERACIÓN                OPERADOR               │            
│   Adición                     +                    │
│   Sustracción                 -                    │
│   multiplicación              *                    │
│   división                    /                    │
│   División de módulo          %                    │
│   multiplicación              *                    │
├────────────────────────────────────────────────────┤

la diagonal (/) representa división mientras que (%) este módulo representa residuo. De tal manera q la diagonal va a representar el cociente de una división.
Y el (%) va a representar lo que sobró de haber realizado la división.

Digamos que queremos dividi 10 entre 4.
Esperaríamos nos de un resultado de 2.5.
Y sin embargo el compilador no lo va a entender así.
La computadora va a entender que estamos queriendo saber cuantas veces cabe el 4 en un 10.
por lo tanto si ponemos 10 / 4 el resultado va a ser un 2 únicamente aunque esperemos un resultado con decimal.
Pero si colocamos 10 % 4 (Diez módulo 4) es donde me va a dar el otro 2 el cual es el que sobra.
Es importante la asimilación de este concepto, pués a ceces nos interesa no conocer el cociente o resultado de la división pero si nos interesa saber cuanto sobró endicha división.
Para eso son esos dos operadores.

Otra de las reglas básicas es:
-Sí en una división tanto el dividendo como el divisor son enteros el resultado vaa ser entero.
-Sí fuece una operación en donde uno de los operando no es un entero pero si un decimal.
    entonces el resultado va a ser de presición doble ("double")o resultado decimal. Esto es claro entenderlo en operacones de suma, resta, división y multiplicación.
    pero donde suele haber más confusión al  principio es en la división, pues dividir dos enteros resuelveotro entero.
-Síqueremos un resultado con decimal, entonces uno de los dos valores o ambos tiene que ser un flotante (número decimal).

El cuadro siguiente resume el concepto:

┌──────────┬────────┬───────┬────────────────┬─────────┐
│Operación │operador│  tipo │ Operando       │Presición│       
├──────────┼────────┼───────┼────────────────┼─────────┤          
│Adición   │   +    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤  
├──────────┼────────┼───────┼────────────────┼─────────┤          
│Sustracc  │   -    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤  
│Multiplic │   *    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤ 
│Divición  │   /    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤ 
│Módulo    │   %    │Binario│Ambos son entero│Entero   │
│          │        │       │Un operador no  │Presición│
│          │        │       │es entero       │doble    │
├──────────┼────────┼───────┼────────────────┼─────────┤
│Negación  │!=      │Unitrio│Entero o doble  │igual op.│
└──────────┴────────┴───────┴────────────────┴─────────┘

Como ejemplo podemos codificar:
cout<<"La división de 10 / 4 es:<<10/4<<endl;"
Esto da 2 como resultado entendiendo el computador que 4 entra dos veces en 10, de allí el resultado 2.
cout<<"El residuo de 10 / 4 es:<<10%4<<endl;"
Tambien es 2 el resultado pero referido al módulo o residuo de la divisió de 10 entre dos.

De la misma manera:
cout<<"La división de 20 / 3 es:<<20/3<<endl;" Resultado 6.
cout<<"El residuo de 20 / 3 es:<<20%3<<endl;" Resultado 2.
Porque 20 entre tres es 6 y sobran 2 como residuo.

Esto es importante asimilarlo cuando estamos haciendo operaciones aritméticas, porque si quisieramos sacar un tercio.
cout<<"La división de 1 / 3 es:<<1/3<<endl;" Resultado 0.
Entendiendo el procesador que el número 3 entra cero veces en el número 1.
En véz del resultado esperado 0,3.

Este cero puede causar muchisimos inconvenientes más adelante porque se esperaba como resultado un decimal y me dio fué cero.

Por lo tanto para obtener el resultado decimal debo hacer que uno de los dos operando sea flotante o ambos.
cout<<"La división de 1 / 3 es:<<1.0 / 3<<endl;" Resultado 0.33.
cout<<"La división de 20 / 3 es:<<20/3.0<<endl;" Resultado 6.66

REGLAS DE ESCRITURA DE OPERACIONES:
-No se debe colocar dos operadores aritméticos uno al lado del otro.
-Se pueden usar parentesis para agrupamientos. Todas las expresiones.
 dentro de parentesis se evaúan primero.
-Se puede utilizar conjunto de parentesis dentro de otro. Los parentesis interioores son evaluados primero.
-No se puede utilizar parentesis para expresar multiplicación. Siempre se debe utilizar el operador de multiplicación.

Al igualque en matemáticas, la computadora sigue las reglas de asociatividad y jerarquía de operaciones.
La Multiplicacion Division y Residuo tienen jerarquia frente a una Adicion o sustraccion.
Siempre van a tener pioridad sobre las sumas y las restas.
Pero que pasa si en un ejercicio tengo varias operaciones del mismo nive?.
En esos casos por Asociatividad se resolveria de izquierda a derecha.
No pasa nada si tenemos una multiplicacion y una resta. Obviamente se lleva primero el producto y luego la sustraccion.
Veamos un caso donde tengo tres operaciones de la misma jerarquia en la misma operacion.

8+5*7%2*4=.
 8+35%2*4=.
  8+1*4=.
   8+4=12.

Fijemonos que tenemos Multipic, Modulo y Multiplic.
Como los tres son de la misma jerarquia entonces comenzamos de izquierda a derecha.
Ignorando el ocho y el signo de Adicion porque ellos tienen por prioridad el ultimo nivel.

Otro caso.
cout<<"El resultado de 20/3.0*2 es: <<20/3.0*2<<endl;"
cout<<"El resultado de 20%3+10 es: <<20%3+10<<endl;"
cout<<"El resultado de 20-1.0/3 es: <<20-1.0/3<<endl;"

Da como resultados:
13.33.
12.
19.667.

Veamos la misma operacion modificandola.
cout<<"El resultado de 20/3.0*2 es: <<20/3.0*2<<endl;"
cout<<"El resultado de 20/(3.0*2) es: <<20/(3.0*2)<<endl;"
Da como resultados:
13.33.
3.33.

VARIABLES:
Cuando se trata de variable incluye dos partes:
-Declaracion de la variable (Reservar un espacio en la memoria).Este espacio va a depender del tipo de dato que se este trabajando.

Short int ocupa dos localidades de memoria de 1 Byte cadauna.
Un Int ocupa 4 localidades de memoria de 1 Byte cadauna.

Hay que resaltar que aunque estamos acostumbrados a trabajar con numeros y con valores.
En realidad no sabe nada de esos numeros o valores.
La computadora unicamente sabe de direcciones de memoria.

Recordando que la memoria esta estructurada por localidades de memoria de un Byte y a su vez cada localidad de memoria tiene un umero asignado.

almacenamiento         almacenamiento     
para un entero         para un entero  
┌──────────┬         ┬───────┬
│    45    │         │   12  │
└──────────┴         ┴───────┴
   1652                2548
direccion            direccion
de memoria           de memoria





















